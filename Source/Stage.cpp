#include "Stage.h"
#include <vector>
#include <cassert>
#include "Screen.h"

namespace
{
	static const int IMAGE_SIZE = { 32 };
	const int MAP_X = { 32 };
	const int MAP_Y = { 22 };
	const int MAP_WIDTH = { 16 };
	const int MAP_HEIGHT = { 12 };
	const int MYMAP[MAP_Y][MAP_X]
	{
		{144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,109,109,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,109,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,109,144},
		{144,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,0,109,109,109,144},
		{144,0,0,0,0,74,75,0,0,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,0,0,0,109,109,144},
		{144,0,0,0,0,90,91,0,0,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,0,0,0,0,109,144},
		{144,0,0,74,75,0,0,0,0,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,90,91,0,0,0,0,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,146,146,146,0,0,144},
		{144,0,0,0,0,0,0,74,75,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,146,147,146,0,0,144},
		{144,0,0,0,0,0,0,90,91,0,0,109,105,105,105,105,105,105,105,105,109,0,0,0,0,0,146,146,146,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144},
		{144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144},
		{144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144}
	};
}

Stage::Stage() 
	//hImage_(nullptr)
{
	//hImage_ = new int[MAP_X * MAP_Y]; // ìÆìIÉÅÉÇÉäämï€
	//hImage_.resize(MAP_X * MAP_Y);
	hImage_ = std::vector<int>(MAP_WIDTH * MAP_HEIGHT, -1);

	LoadDivGraph("Assets/img/bg.png",
		MAP_WIDTH * MAP_HEIGHT,
		MAP_WIDTH, MAP_HEIGHT,
		IMAGE_SIZE, IMAGE_SIZE,
		hImage_.data());

	mapChip_ = new MapChip();
}

Stage::~Stage()
{
	for (int i = 0; i < MAP_WIDTH * MAP_HEIGHT; i++)
	{
		if (hImage_[i] != -1)
		{
			DeleteGraph(hImage_[i]);
			hImage_[i] = -1;
		}
	}
	//delete[] hImage_; // îzóÒâï˙
}

void Stage::Init()
{

}

void Stage::Update()
{
}

void Stage::Draw()
{

	//for (int y = 0; y < MAP_Y; y++)
	//{
	//	for (int x = 0; x < MAP_X; x++)
	//	{
	//		int request = MYMAP[y][x];

	//		if (hImage_[request] != -1)
	//		{
	//			DrawGraph(x * IMAGE_SIZE, y * IMAGE_SIZE, hImage_[request], TRUE);
	//		}
	//	}
	//}

	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_X; x++)
		{
			int request = MYMAP[y][x];

			if (hImage_[request] != -1)
			{
				DrawGraph(x * IMAGE_SIZE, y * IMAGE_SIZE, hImage_[request], TRUE);
			}
		}
	}
}

void Stage::Release()
{
}
